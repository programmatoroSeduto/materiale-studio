VARIABILI E ALTRE STRUTTURE DATI DI USO COMUNE

---

la struttura dati fondamentale in Matlab è la matrice; Matlab mette a disposizione moltissime notazioni per il calcolo di matrici, alcune delle quali non sono presenti in altri linguaggi di programmazione: un esempio è il prodotto tra matrici.

---

definizione di una qualunque variabile:
-	non esiste la dichiarazione di variabili!
-	non c'è alcuna parola chiave che dica a Matlab che sto definendo una variabile; vedi JS, che anticipa la definizione con la keyword "var", mentre qui non è necessario
-	esiste solo la dichiarazione o l'accesso alla memoria in lettura o scrittura
-	se la variabile richiesta non esiste, Matlab la istanzia e gli assegna il valore dichiarato
-	Matlab, come ogni linguaggio di scripting, è debolmente tipato, dunque riconoscerà in automatico il tipo della variabile; le variabili sono quindi solo "contenitori"

quindi una "definizione di variabile" in Matlab è semplicemente un accesso alla memoria. per accedere alla memoria, la sintassi è la seguente:

<nome_variabile> = <valore_variabile>

oppure la stessa seguita da punto e virgola. l'aggiunta del punto e virgola alla fine dell'istruzione dice a Matlab di non stampare il valore della variabile in output, "accesso silenzioso".

---

Matlab mette a disposizione alcune istruzioni per ripulire la memoria dalle variabili:

clear			%elimina tutte le variabili
clear <var>		%elimina solo la variabile chiamata <var>

---

il valore di una variabile può essere ovviamente un numero:

vv = 5;

può essere un numero "reale":

vv = 0.5
vv = 0.005e-64		%notazione scientifica

può essere anche una matrice. Ecco la sintassi per le matrici:
-	le "sequenze" di valori sono contenute tra parentesi quadre
-	sulla stessa riga, un valore può essere separato dall'altro con la virgola, o semplicemente con uno spazio
-	le righe sono separate col punto e virgola
ad esempio, la seguente matrice

0 1 2
3 4 5
4 3 2

può essere rappresentata così in Matlab:

vv = [ 0, 1, 2; 3, 4, 5; 4, 3, 2 ]

oppure così:

vv = [ 0 1 2 ; 3 4 5 ; 4 3 2 ]

la sintassi Matlab permette anche matrici "innestate":

vv = [[0 1 2];[3 4 5];[4 3 2]]

è la stessa matrice di prima, ma composta di sottomatrici; ci pensa Matlab, al momento dell'accesso, a comporre la matrice finale. da notare che la seguente

[[0 1 2] [3 4 5] [4 3 2]]

è un vettore riga, e non la matrice di prima; questo perchè il separatore ora è lo spazio.
ovviamente, attenzione alle dimensioni delle sottomatrici: Matlab ritornerà errore in casi come il seguente,

[[0 1 2] [3 4 5] ; [4 3 2]]

---

Matlab mette a disposizione notazioni per elaborare le sottomatrici:

vv = [[0 1 2];[3 4 5];[4 3 2]]

il singolo elemento è vv(riga, colonna). OCCHIO: gli indici riga-colonna vanno da 1 alle dimensioni della matrice! Matlab segue la convenzione dei matematici sugli indici, non quella degli informatici.

una riga intera di matrice è vv(riga, :) o semplicemente vv(riga).

una colonna di matrice è vv(:, colonna). 

come seleziono una generica sottomatrice? così: vv([indici di riga] , [indici di colonna]). ad esempio,

vv([2, 3], [1, 2])

restituirà la matrice

3 4
4 3

estratti dalla matrice

0 1 2
3 4 5
4 3 2

---

ci sono alcune utili notazioni per costruire vettori di valori. questa notazione

vv = 1:1:10

genera una sequenza di valori che vanno da 1 a 10, a passi di 1. viene generato il seguente vettore:

[1 2 3 4 5 6 7 8 9 10]

ecco il funzionamento dell'istruzione nel formato "w = v0:step:vf"
0.	INIT a = v0
1.	CICLO:
	1.1	a += step
	1.2	se a <= vf aggiungi il valore di a al vettore w, altrimenti FINE CICLO

questa notazione conviene quando
1.	conosco v0 e vf (ovviamente...)
2.	E' NOTO quanto dista un valore dall'altro
3.	NON M'IMPORTA DI quanti valori generare

---

un altro metodo impiega la funzione linspace():

vv = linspace(v0, vf, N)

la funzione genera una sequenza di valori N compresi tra v0 e vf. notazione comoda quando 
1.	conosco v0 e vf (ovviamente...)
2.	NON SO quanto dista un valore dall'altro (e NON M'IMPORTA saperlo)
3.	SO A PRIORI di quanti valori ho bisogno

---

