ELENCO REGISTRI MIPS-32

---

ogni registro è indirizzabile in due modi in codice assembly:
-	tramite il suo numero: $0, $1, $2, ..., $30, $31
-	tramite il suo simbolo in convenzione MIPS: $zero, $at, $v0, ...
mentre in codice macchina è disponibile solo il primo metodo, tramite numero a 5 bit.

---

REGISTRI UTILIZZABILI SIA IN LETTURA CHE IN SCRITTURA
registri v, a, t, s, registri di stack(gp, sp, fp) e return address(ra).

$2		$v0
$3		$v1
si possono utilizzare per i valori di ritorno delle funzioni.
IN SCRITTURA: alla chiusura di una prcedura
IN LETTURA: il chiamante, dopo una chiamata a funzione, legge i valori di ritorno da questi registri

$4		$a0
$5		$a1
$6		$a2
$7		$a3
parametri delle funzioni, da usare nelle chiamate a procedura.
domanda: e se servissero più di 4 valori? si ricorre alla memoria, e allo stack!

$8		$t0
$9		$t1
$10		$t2
$11		$t3
$12		$t4
$13		$t5
$14		$t6
$15		$t7

$24		$t8
$25		$t9
registri temporanei: usati per fare calcoli in più passaggi. sono assolutamente necessari, dato che le istruzioni MIPS svolgono sempre compiti molto semplici.
questi, e i registri s, costituiscono l'enviroment di una procedura (nota: in assembly, tutto è una funzione, proprio come in C) che dev'essere preservato quando si eseguono chiamate a procedura.

$16		$s0
$17		$s1
$18		$s2
$19		$s3
$20		$s4
$21		$s5
$22		$s6
$23		$s7
registri dedicati alle vere variabili del programma. 

$28		$gp
$29		$sp
$30		$fp
dedicati allo stack del programma (vedi più in dettaglio lo stack)

$31		$ra
ogni volta che viene eseguita una jal, l'indirizzo PC+4 viene salvato in questo registro.

---

REGISTRI RISERVATI 
registri zero, assembler temporany(at), kernel(k).

$0		$zero
contiene la costante zero (registro più utile di quel che sembra...)
si può usare solo in lettura; vietata categoricamente la scrittura su questo registro!

$1		$at
riservato all'assembler
ad esempio, serve per comporre costanti molto lunghe nel caso quelle siano troppo lunghe per stare in un'istruzione da 32 bit.

$26		$k0
$27		$k1
riservati al sistema operativo. meglio non toccarli (a meno che tu non sia il sistema operativo...)

---

ELENCO COMPLETO DEI REGISTRI E DEI LORO NOMI MIPS

$0		$zero		zero

$1		$at			assembler temporany

$2		$v0			value 0
$3		$v1			value 1

$4		$a0			argument 0
$5		$a1			argument 1
$6		$a2			argument 2
$7		$a3			argument 3

$8		$t0			temporany 0
$9		$t1			temporany 1
$10		$t2			temporany 2
$11		$t3			temporany 3
$12		$t4			temporany 4
$13		$t5			temporany 5
$14		$t6			temporany 6
$15		$t7			temporany 7

$16		$s0			
$17		$s1			
$18		$s2			
$19		$s3			
$20		$s4			
$21		$s5			
$22		$s6			
$23		$s7			

$24		$t8			temporany 8
$25		$t9			temporany 9

$26		$k0			kernel 0
$27		$k1			kernel 1

$28		$gp			global pointer
$29		$sp			stack pointer
$30		$fp			frame pointer

$31		$ra			return address

---

