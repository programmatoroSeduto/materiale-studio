ISA MIPS-32 - VERSIONE RIDOTTA

---

notazioni:

add[i][u] sta per le 4 istruzioni
	add
	addi
	addu
	addiu

pippo[ciccio][peppona][mara] sta per
	pippo
	pippociccio
	pippopeppona
	pippomara
	pippocicciopeppona
	pippociccomara
	...devo continuare? ci siamo capiti.
	
s[w h b] sta per
	sw
	sh
	sb
e basta!

s[a b c][d e f] sta per
	sa
	sb
	sc
	sd
	se
	sf
	sad
	sae
	...capito, no?
	
nota: bisogna rispettare l'ordine delle parentesi!

operazione di assegnazione:

a <- b + c

significa "prendi 'b', sommalo con il valore contenuto in 'c' e il risultato mettilo in 'a'".

---
	
ricorda il formato delle istruzioni. il nome dato agli elementi delle istruzioni dice dove sta il dato nell'istruzione scritta in codice macchina.

R:	codop | rs | rt | rd | shamt | funct |
I:	codop | rs | rt | const              |
J:	codop | const                        |

nota: questa notazione verrà utile per studiare poi come il processore viene implementato in termini di progetto logico (vedi Patterson, Hennessy 'Struttura e Progetto dei Calcolaroti').

---

alcune regole sintattiche del linguaggio assembly del MIPS-32:
-	solo commenti inline, preceduti da cancelletto #
-	le istruzioni sono disposte una riga per volta, e verranno eseguite in maniera sequenziale
-	è concesso spaziare le istruzioni come si vuole, purchè non si violi il formato delle istruzioni
-	un registro viene indicato con un numero o un codice, preceduto dal simbolo dollaro $; ad esempio, $t6 o $25
-	la notazione const(reg) si legge "prendi il valore da 'reg' e sommaci 'const'"; ad esempio, 6($t6) oppure -17($25); la notazione si ritrova solo per esprimere indirizzi di memoria
-	talvolta si possono trovare istruzioni del tipo 'LABEL:' ; questi sono indirizzi di memoria. l'idea fondamentale: queste etichette rappresentano valori particolari del program counter, e consentono di indirizzare direttamente le varie istruzioni del programma (pensa ad esempio alle chiamate a procedura). si possono trovare così:
		...
		LABEL: istruzione
		...
	oppure così:
		...
		LABEL:
		istruzione 
		istruzione
		istruzione
		...
	come tutte le altre istruzioni, è possibile spaziamento libero

---

ISTRUZIONI ARITMETICHE INTERE
semantica tipica:  
	<operazione> <scrivi in>, <(op 1)leggi da>, <(op 2)leggi da>
dove op 2 può essere un registro (formato R) o una costante (formato I).

add[u] rd, rs, rt		# rd <- rs + rt
addi[u] rt, rs, const	# rt <- rs + const
sub[u] rd, rs, rt		# rd <- rs - rt

nota bene: perchè manca subi? perchè addi può contenere un numero negativo, dunque sarebbe inutile aggiungere l'istruzone subi per eseguire una sottrazione che posso già eseguire con addi.
altre istruzioni:

mult[u] rd, rs, rt		# moltiplicazione 
multi[u] rt, rs, const	#
div[u] rd, rs, rt		# divisione
divi[u] rt, rs, const	#

nota: meglio non usare con tanta leggerezza queste operazioni! per eseguire operazioni più comuni, tipo la vmoltiplicazione per due, si usano le proprietà dei numeri in codice binario, non mult! meglio usare queste espressioni solo quando se ne ha realmente bisogno.

---

LOAD E STORE
semantica delle store:
	<operazione> <prendi da>, <indirizzo>
notazione per le load:
	<operazione> <scrivi in>, <indirizzo>
dove l'indirizzo è sempre riportato nella notazione con offset: dato un indirizzo di base contenuto in uno dei registri, ricavo l'indirizzio dove prendere il dato sommando all'indirizzo di base una costante che può essere positiva, negativa o nulla. dunque queste istruzioni sono tutte di formato I.

l[w h b] rt, const(rs)		# load word, load half, load byte
s[w h b] rt, const(rs)		# store word, store half, store byte
[l s][h b][u]				# load e store con estensione del segno 
							# nota bene: [l s]w non hanno bisogno di estensione del segno, viste le dimensioni di una word

alcune osservazioni.

(lw, sw)
il processore trasferisce parole da 32bit tra i registri e la memoria principale. occhio all'indirizzamento per byte! vedi sotto.

(lb, sb)
le memorie del MIPS-32 e della memoria principale sono indirizzabili al byte... cosa significa?
significa che ogni locazione da una word non va pensata come unità indivisibile, ma come sequenza di 4 celle più piccole, ognuna da un byte, ordinati da LSB a MSB. dunque, di una locazione di memoria,
[7-0]	primo byte
[15-8]	secondo byte
[23-16]	terzo byte
[31-24]	quarto byte
questo ha delle conseguenze su come viene calcolato l'offset e su come muoversi nella memoria. se voglio selezionare una word nelle istruzioni lw ed sw, devo tenere conto dell'indirizzamento al byte: inserirò nell'istruzione l'indirizzo al primo byte della parola che voglio richiedere. se voglio selezionare un byte particolare invece, mi basterà muovere liberamente l'indirizzo.
a cosa potrà mai servire un'istruzione che carica il singolo byte? per lavorare con codifiche ASCII ad esempio!

(lh, sh)
sono molto comuni le operazioni sui caratteri nei programmi; perciò, il MIPS mette a disposizione operazioni per lavorare su dati che hanno le dimensioni di un carattere in modo da poter utilizzare anche formati come UNICODE codificato su 16 bit.

---

OPERAZIONI LOGICHE BIT A BIT

and rd, rs, rt 		# and 
andi rt, const(rs)	
or rd, rs, rt 		# or
ori rt, const(rs)	
nor rd, rs, rt 		#nor, ovvero NOT(OR)
	# nota: non serve il not, il nor ingloba anche il not

sll rd, rs, rt 		# shift left logical
srl rd, rs, rt 		# shift right logical

---

SALTI CONDIZIONATI
ovvero tutte quelle istruzioni che permettono di adattare il comportamento del software in base alla situazione dei parametri in memoria. formato I per le istruzioni di salto, formato R per quelle di confronto.

slt[u] rd, rs, rt 		# se rs < rt allora rd <- 1 ; altrimenti rd <- 0
slti[u] rt, rs, const	# stessa cosa di prima, ma con il secondo operatore dato dall'istruzione

beq rs, rt, LABEL		# se rs = rt allora PC <- LABEL (vedi nota bene)
bne rs, rt, LABEL		# se rs != rt allora PC <- LABEL

nota bene: dire 'PC <- LABEL' è un po' impreciso, dato che LABEL può essere solo una costante da 16 bit mentre un indirizzo è una costante di 32 bit; da dove vengono i bit mancanti?
il processore calcola così l'indirizzo a partire da LABEL:
1.	shifta a sinistra di 2 bit la costante LABEL; questo fa guadagnare 2 bit, ma c'è di più. ricordi l'indirizzamento al byte? SHIFTARE DI 2 EQUIVALE A MOLTIPLICARE PER 4 IL VALORE DI LABEL, ovvero con l'operazione di shift converto un'indicazione sulla word in un'indicazione sui byte in memoria; ricorda che la memoria istruzioni è la stessa di quella dati, perciò serve indirizzare al byte anche la memoria istruzioni, anche se di norma sarebbe poco utile in un'architettura come questa (mentre potrebbe essere un punto a favore per architetture con istruzioni a lunghezza variabile)
2.	metti i 18 bit ricavati prima come bit meno significativi dell'indirizzo, e usa i bit più significativi del program counter per completare l'indirizzo; questo significa che l'ampiezza del salto è limitata. ci fa preoccupare questa cosa? statisticamente no: la stragrande maggioranza dei programmi non ha bisogno di chiamate ad indirizzi più lontani rispetto a quella ampiezza

non sono stato chiaro? ecco un esempio:

PC attuale: 		01010100001010101011010101010110
LABEL:				                1111111111111111

qual'è l'indirizzo a cui saltare?

sll LABEL:  		              111111111111111100
PC MSB:				01010100001010
indirizzo finale:	01010100001010111111111111111100

l'umano non deve preoccuparsi del calcolo degli indirizzi: ci pensa direttamente il compilatore. perciò, posso scrivere LABEL nelle istruzioni senza minimamente preoccuparsi di quale sia il valore preciso di LABEL tale da avere come risultato di tutte queste operazioni l'indirizzo a cui voglio saltare.

---

SALTI INCONDIZIONATI
chiamati così perchè richiedono un salto senza prima dover valutare alcuna condizione: salto, e basta.

j LABEL		# 'jump' all'indirizzo const (formato J)
jal LABEL	# 'jump' a const, ma prima memorizza 'PC+4' nel registro $ra (formato J)
jr rs		# jump register: l'indirizzo proviene da uno dei registri (formato I)

jump register prende l'indirizzo direttamente dal registro; ricordiamo che la lunghezza di un numero in un qualunque registro MIPS-32 è di 32 bit, dunque non serve alcun completamento dell'indirizzo.

jump invece ha bisogno di un completamento, dato che l'indirizzo è contenuto direttamente nell'istruzione; il metodo seguito è lo stesso usato per ricavare l'indirizzo di un salto condizionato beq o bne, ovviamente con dimensioni opportune.

jump and link fa due operazioni:
-	prima di saltare, salva nel registro $ra l'indirizzo della prossima istruzione, cioè PC + 4 (ricorda che esiste l'indirizzamento al byte per la memoria istruzioni! PC + 1 selezionerebbe solo il bite successivo, e non la word successiva!)
-	dopo aver salvato l'indirizzo, esegue il salto
a cosa potrà mai servire un'istruzione del genere? serve ad implementare le chiamate a procedura! ogni volta che chiamo una procedura per svolgere un lavoro, vorrei che appena il lavoro viene completato, il programma potesse riprendere l'esecuzione dal punto in cui l'ho lasciato; ma se salto senza segnarmi da dove sono partito, non potrò riprendere l'esecuzione! questo spiega anche perchè serva anche un'istruzione che prelevi l'indirizzo di salto da un registro.

---

