MYSQLI - OGGETTO MYSQLI - PARAMETRI E METODI FONDAMENTALI

---

connessione al DB:

__construct(server, name, pass, dbname, port, socket)
							costruttore dell'oggetto mysqli, include la connessione al db
							NOTA BENE: si può richiamare anche con meno parametri di quelli riportati; rispetta però l'ordine

->change_user(name, password, db)
							cambia utente, e accedi al db specificato
							ritorna true o false a seconda che l'operazione abbia o no avuto successo
							
->connect_errno				codice di errore riferito all'ultimo tentativo di connessione
							CODICI UTILI:
							0		nessun errore
							
->connect_error				errore della connessione, in formato stringa
							ritorna NULL se non c'è stato alcun errore (o alcun tentativo di connessione...)
							
->close()					chiudi la connessione col db

->ping()					utile in caso la connessione con un db remoto cadesse
							fai ping al server fin quando quello non ricomincia a rispondere
							ritorna TRUE in caso di risposta, FALSE in caso contrario


---

operazioni sul db, versione semplice:

->query(query)				esegue una qualunque operazione sul db, espressa in linguaggio SQL
							NOTA: potrebbe portare a grossi problemi di sicurezza. attenzione!
							
->query(query, opts)		query con opzioni:
							MYSQLI_USE_RESULT				usa subito il risultato
							MYSQLI_STORE_RESULT (default)	metti da parte il risultato per un futuro utilizzo
							nella maggior parte dei casi però, meglio usare la funzione con un solo parametro
							
->multi_query(query)		esegue più query in una volta sola. Occhio ai separatori nel codice SQL! usa i punto e virgola!
							ritorna FALSE se la prima query fallisce, altrimenti ritorna il risultato iniziale
							ATTENZIONE! il metodo esegue le query in ordine sequenziale, e si interrompe alla prima query sintatticamente non corretta, quindi potrebbe piantarsi dopo aver ottenuto qualche risultato.

->next-result()				"prepara" il prossimo risultato da analizzare
							ritorna FALSE se non ci sono più risultati da analizzare
							
->more_results()			ci sono altre query che devono essere analizzate? 

---

prepared statements:

->prepare(query)			precompilazione della query con placeholder
							ritorna FALSE se c'è stato qualche errore

per altri metodi utili sui prepared statement, vedi https://www.php.net/manual/en/class.mysqli-stmt.php

---

informazioni sulle operazioni effettuate sul db attraverso query:

->affected_rows				il numero di righe coinvolte da una query

->errno						in caso di errore, qui trovi il codice associato all'errore
							CODICI COMUNI:
							0		nessun errore (o nessuna operazione ancora richiesta...)
							
->error						descrizione dell'errore riferita all'ultima operazione eseguita
							NULL se non ci sono stati problemi
							
->info						una sorta di "resoconto" riguardante l'ultima query, in stringa
							ad esempio,
								Records: 150  Duplicates: 0  Warnings: 0
							
->error_list				ritorna un array di errori riferiti all'ultima operazione svolta in formato stringa

---

gestire una transazione:
vedi documentazione ufficiale.

->begin_transaction(flag)	richiedi l'inizio di una transazione
							flags, cioè il tipo di transazione: 
							MYSQLI_TRANS_START_READ_ONLY
							MYSQLI_TRANS_START_READ_WRITE
							MYSQLI_TRANS_START_WITH_CONSISTENT_SNAPSHOT
							ritorna true o false
							
->commit()					invia la transazione dopo averla formulata
->autocommit(flag)			scegli se eseguire il commit in automatico dopo la formulazione o meno
							flags: TRUE o FALSE
							
->rollback()				ripristina la situazione al momento della chiamata a begin_transaction()
							
---

