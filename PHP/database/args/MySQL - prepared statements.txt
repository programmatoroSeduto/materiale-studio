PREPARED STATEMENTS

---

perchè introdurre i prepared statement? il seguente codice contiene una grossa vulnerabilità all'sql injection:

$user = $_POST['user']; 
$password = hash('sha256', "paperino");
$query = $mysqli->query("SELECT * FROM login WHERE user = '$user' AND password = '$password'");

basta infatti fornire un input malevolo a $user per modificare l'effetto di questa query!
i prepared statements consentono di proteggersi, per quanto possibile, da questo genere di vulnerabilità.

---

query() permette di eseguire subito una query; nei prepared statements invece si preferisce eseguire la query in più fasi.
la prima fase è la "precompilazione" della query, usando il metodo

->prepare("query sql con placeholder")

contenuto nella classe che rappresenta il collegamento tra script e database. la query ad argomento della funzione è solo uno scheletro nella quale non abbiamo ancora inserito alcuna informazione. segno col punto interrogativo il punto dove porre l'informazione mancante al momento di eseguire la query. ad esempio,

$query = $mysqli->prepare("SELECT * FROM login WHERE user = ? AND password = ?");

quel codice SQL rappresenta lo scheletro della query, a cui mancano le informazioni "user" e "password".

---

la seconda fase consiste nell'associare i placeholder ai valori che la query deve utilizzare. si usa il metodo

->bind_param( format, ... args ... )

che funziona in modo molto simile a una printf() in c:
	format è una stringa, concatenazione di simboli che esprimono in sequenza i tipi di dato dei placeholder IN ORDINE
	poi ci sono gli argomenti, ovvero i valori effettivi da sostituire ai placeholder
	
un esempio di format è questo: 'ss' significa che ci sono due placeholder, e che entrambi sono di tipo stringa. 'sd' significa che ci sono due placeholder, il primo è una stringa, il secondo è un double. ecco i valori di tipo:
	s	stringa
	i	intero
	d	double
	b	blob
nota bene: se il tipo della variabile in args non corrisponde al tipo indicato nel format, la funzione tradurrà il valore nel tipo indicato da format e porrà quello nella query anzichè il valore originale. 

---

terza fase, esecuzione della query col metodo

->execute(query)

ritorna un oggetto utile per 
-	verificare se la query è andata o no a buon fine
-	ritrovare i risultati di una query qualora ce ne fossero

---

come ritrovare i risultati di una query? codice:

$result = $mysqli->query($query);
$row = $result->fetch_array(MYSQLI_NUM);

si usa il metodo ->fetch_array() dicendogli quale tipo di array ritornare:
	MYSQLI_NUM		array numerico
	MYSQLI_ASSOC	array associativo
	MYSQLI_BOTH		
	
importante notare che fetch_array() è una sorta di iteratore sul set di tuple ritornate: usando una volta la funzione, essa mi ritorna una tupla tra quelle presenti e la elimina dall'insieme. per recuperare tutte le tuple avrò dunque bisogno di un ciclo:

while($row = $result->fetch_array(MYSQLI_NUM))
{
	//operazione su row
}

cosa sarà row? un array, le cui celle sono gli attributi della singola tupla.
ci sono alcune scorciatoie:

$row = $result->fetch_row();		//corrisponde a fetch_array(MYSQLI_NUM)
$row = $result->fetch_assoc();		//corrisponde a fetch_array(MYSQLI_ASSOC)
$obj = $result->fetch_object();		//ritorna la tupla sotto forma di oggetto

esiste poi un metodo per ritornare tutti i valori in un solo colpo, in formato JSON: 

$rows = $result->fetch_all(MYSQLI_ASSOC);

---

