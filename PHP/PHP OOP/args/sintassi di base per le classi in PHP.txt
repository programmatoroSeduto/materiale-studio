SINTASSI DI BASE PER LE CLASSI IN PHP

---

per definire una classe in PHP si usa la keyword "class":

<?php
	class MyClass
	{
		//codice
	}
?>

i campi hanno questa sintassi:

<visibilità> $<nome-campo> = <valore-iniziale> ;

per i metodi la sintassi è praticamente identica:

<visibilità> function <nome-metodo>(<parametri-metodo>) 
{
	//codice...
}

l'unica cosa che cambia rispetto al PHP normale, la definizione delle costanti: occorre utilizzare la keyword const,

<visibilità> const $<nome-const> = <valore> ;

dichiarare valori statici? usando la keyword static proprio come in java.

---

come istanziare una classe? PHP offre una sintassi molto simile a quella del java: usare l'operatore new.

<?php
	$istanza = new MyClass()
?>

---

come accedere ai campi e ai metodi di una istanza? usare l'operatore arrow:

<?php
	//accesso ad un metodo dell'istanza
	$istanza->metodo();
	
	//accesso ad un campo pubblico dell'istanza
	$a = $istanza->campo;
	
	//accesso alle costanti
	$a = $istanza::COSTANTE;
	//nota: lo stesso metodo di accesso si usa per campi e metodi statici
?>

disponibile la keyword $this, con significato del tutto identico a quella nel java. per l'accesso alle costanti dall'interno delle classi non si usa $this, ma self:

self::COSTANTE

lo stesso metodo si usa per i dati statici (campi e metodi).

---

controllare se due classi istanziate hanno come modello la stessa classe? si usa instanceof, proprio come in Java:

class1 instanceof class2

l'operatore ritorna true solo se le due classi fanno riferimento allo stesso modello, altrimenti false.

---

il costruttore della classe ha un nome particolare: __construct() , da notare il doppio underscore. fa parte dei "metodi magici" a disposizione delle classi.

purtroppo PHP non supporta di base i costruttori multipli! 
fortunatamente, si può aggirare il problema.

ad esempio, adattando il comportamento del costruttore in base ai parametri forniti. 2 funzioni risultano estremamente utili:

funct_num_args()				numero di parametri passati alla funzione?
funct_get_arg(<idx>)			ritorna l'argomento numero <idx> tra quelli passati

va detto che ci sono metodi migliori per fare ciò. questa è una soluzione, ma altre più eleganti se ne possono trovare.

---

altro metodo magico molto importante nel mondo della programmazione server-side: __destruct() il distruttore, metodo chiamato prima di rimuovere definitivamente dalla memoria un'istanza da buttare via. la distruzione delle classi è automatica, ricorda molto quello che fa il garbage collector: non è il programmatore a doversi preoccupare della distruzione della classe! basta eliminare ogni riferimento alla classe per fare sì che venga distrutta, proprio come avviene in Java. 

---

visibilità:

PUBLIC						(default) possono accedere all'elemento tutti quelli che lo richiedono
PRIVATE						non può accedere nessuno dall'esterno all'elemento
PROTECTED					solo le classi figlie possono accedere all'elemento
							un campo protected lo posso pensare come "privato" ma condiviso tra classi legate per ereditarietà

---

ereditarietà in PHP:

<?php
	class MyClass extends FatherClass
	{
		//codice
	}
?>

come in Java, una classe può avere un solo padre; non è concessa l'ereditarietà multipla. PHP consente di superare questo limite usando i traits (vedi più avanti).

la classe figlia erediterà tutti i campi e metodi che siano protected o public. e può contenere altri metodi e altri campi che rendano la classe figlia diversa da quella padre.

possibile fare overriding dei metodi semplicemente ridefinendo un metodo della classe padre.

il padre può anche negare l'overriding nelle classi figlie usando la keyword final:

<?php
	final class FatherClass
	{
		//codice
	}
	
	class ChildClass extends FatherClass
	{
		//non è possibile l'overriding dei metodi della classe padre!
	}
?>

---

esattamente come il Java, PHP mette a disposizione anche la classe astratta e i metodi astratti:

<?php
	abstract class FatherClass
	{
		//...metodi con modificatori abstract...
	}
	
	class ChildClass extends FatherClass
	{
		//la classe figlia è OBBLIGATA a definire i metodi astratti
	}
?>

particolare la dichiarazione di funzioni astratte. per esse, è possibile anche specificare un tipo di ritorno:

abstract <visibilità> function <nome-metodo>(<parametri-metodo>) : <tipo-ritorno> ;

tipi di ritorno:
	string

---

"ereditarietà multipla" usando il costrutto trait:

<?php
	trait <nome-trait>
	{
		//metodi e campi
	}
?>

un trait non è proprio una classe, ma un insieme di informazioni che costituiscono un "modulo" per montare la classe. dunque questa non è esattamente ereditarietà multipla, ma un modo per costruire in maniera modulare le classi. un trait può contenere diversi metodi e campi, che poi verranno importati nella classe che ne farà uso, con le solite regole di visibilità che abbiamo visto per le classi legate da ereditarietà.

come usare un trait? con la parola chiave use seguita da una lista di trait separati da virgola:

<?php
	class MyClass
	{
		use <trait-1>, <trait-2>, ... ;
		//codice
	}
?>