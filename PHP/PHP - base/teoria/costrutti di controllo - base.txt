COSTRUTTI DI CONTROLLO - BASE

costrutto condizionale, esattamente come in C:

//versione col solo IF:
if ( <condizione> ) 
{
	//blocco di codice
	//viene eseguito solo se la condizione è verificata
}


//forma if-else
if ( <condizione> ) 
{
	//blocco di codice
	//viene eseguito solo se la condizione è verificata
}
else 
{
	//bloco di codice
	//eseguito se nessun caso sopra si verifica
}
//nota: il blocco else è falcoltativo in ogni caso


//forma if-elseif-else:
if ( <condizione> ) 
{
	//blocco di codice
	//viene eseguito solo se la condizione è verificata
}
elseif
{
	//valutato come un if
	//solo se nessuna condizione data sopra si verifica
}
//avanti con altri blocchi elseif
else 
{
	//bloco di codice
	//eseguito se nessun caso sopra si verifica
}

---

forma abbreviata della forma if-else, detto anche operatore ternario:
	<condizione> ? <codice-if> : <codice-else>;
	
a cosa può servire questa forma? questo è un esempio di utilizzo:
	$tipologia = ($altezza >= 180) ? 'alto' : 'normale';
	
consente di risparmiare righe di codice, rendendolo così più leggibile.

---

in PHP sono considerati falsi questi elementi:

->	una qualunque stringa contenente il carattere 0
->	una stringa vuota
->	un array di zero elementi
->	il valore null

---

interessante questo modo di scrivere il costrutto if-else:

<?php
	<?php if ($error): ?>
        <p style="color: red"><?php echo $error ?></p>
    <?php else: ?>
        <p><?php echo $result ?></p>
    <?php endif ?>
?>

ovvero un costrutto può essere "distribuito". osservazioni:
-	il blocco di istruzioni si apre sempre con i due punti
-	il costrutto termina sempre con una keyword del tipo end<costrutto>; ad esempio, endif
bastano queste poche regole per poter distribuire qualunque altro costrutto di controllo. questo consente di risparmiare molte righe di codice quando si devono fare delle echo con grandi quantità di markup e/o altro.

---

come in C, in PHP esiste il costrutto switch-case:

switch ( <variabile> )
{
	case <valore-1>:
		//codice
	break;
	
	...
	
	case <valore-N>:
		//codice
	break;
	
	//opzionale
	default:
		//codice
}

viene selezionato il codice da eseguire in base al valore della variabile indicata nelle parentesi di switch(). attenzione al break a conclusione di ogni blocco di codice!
se più blocchi di codice sono associati allo stesso valore, scrivo:

<?php
	$colore = 'rosso';
	switch ($colore) {
		case 'blu':
		case 'verde':
			echo "Il colore selezionato è un colore freddo";
			break;
		case 'giallo':
		case 'rosso':
		case 'arancione':
			echo "Il colore selezionato è un colore caldo";
			break;
		default:
			echo "Nessun colore corrispondente alla tua selezione";
			break;
	}
?>

esattamente come in C.

---

ciclo for() esattamente come in C:

for(<contatore>; <condizione>; <aggiornamento>)
{
	//blocco di codice
}

la sezione <contatore> serve ad inizializzare e istanziare i contatori, e viene eseguita ovviamente prima di eseguire il blocco. 
prima di iniziare, l'interprete testa la condizione. in generale il blocco di codice viene eseguito se la condizioe risulta verificata.
ogni volta che la condizione è verificata, viene eseguito il contenuto della sezione aggiornamento.

come in C, PHP mette a disposizione due parole chiave, utilizzabili in ogni costrutto ciclico:
	continue			passa al prossimo test della condizione
	break				interrompe il ciclo
	
---

ciclo while() come in C:

while(<condizione>)
{
	//blocco di codice
}

ogni volta, prima di eseguire il codice si fa il test: se la condizione risulta verificata, si esegue il blocco di codice. altrimenti, il ciclo termina.

esiste anche la versione che fa il test solo dopo l'esecuzione del blocco di codice:

do
{
	//blocco di codice
}
while( <condizione> )

nota la mancanza del punto e virgola alla fine del while. qui non serve.

---

